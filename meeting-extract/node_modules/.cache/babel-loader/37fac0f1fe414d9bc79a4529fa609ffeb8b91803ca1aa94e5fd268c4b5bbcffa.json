{"ast":null,"code":"var _jsxFileName = \"/Users/crystalcho/Meeting_Extract/meeting-extract/src/pages/Chatbot/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Chatbot = () => {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [conversation, setConversation] = useState([]);\n  const handleMessageChange = e => {\n    setMessage(e.target.value);\n  };\n  const handleSend = async () => {\n    const userMessage = {\n      sender: \"user\",\n      text: message\n    };\n    setConversation([...conversation, userMessage]);\n    try {\n      const response = await fetch('http://localhost:5002/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: message\n        })\n      });\n      const data = await response.json();\n      const botMessage = {\n        sender: \"bot\",\n        text: data.response\n      };\n      setConversation([...conversation, userMessage, botMessage]);\n      setMessage(\"\");\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat with the Bot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: conversation.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: handleMessageChange,\n      placeholder: \"Type your message...\",\n      className: \"chat-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      className: \"send-btn\",\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"cE96UCVfnEtSBPfqjRvBPBV4V3U=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","message","setMessage","conversation","setConversation","handleMessageChange","e","target","value","handleSend","userMessage","sender","text","response","fetch","method","headers","body","JSON","stringify","query","data","json","botMessage","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/crystalcho/Meeting_Extract/meeting-extract/src/pages/Chatbot/Chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Chatbot.css\";\n\nexport const Chatbot = () => {\n    const [message, setMessage] = useState(\"\");\n    const [conversation, setConversation] = useState([]);\n\n    const handleMessageChange = (e) => {\n        setMessage(e.target.value);\n    };\n\n    const handleSend = async () => {\n        const userMessage = { sender: \"user\", text: message };\n        setConversation([...conversation, userMessage]);\n\n        try {\n            const response = await fetch('http://localhost:5002/chat', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ query: message })\n            });\n            const data = await response.json();\n            const botMessage = { sender: \"bot\", text: data.response };\n            setConversation([...conversation, userMessage, botMessage]);\n            setMessage(\"\");\n        } catch (error) {\n            console.error(\"Error sending message:\", error);\n        }\n    };\n\n    return (\n        <div className=\"chatbot-container\">\n            <h1>Chat with the Bot</h1>\n            <div className=\"chat-window\">\n                {conversation.map((msg, index) => (\n                    <div key={index} className={`message ${msg.sender}`}>\n                        <p>{msg.text}</p>\n                    </div>\n                ))}\n            </div>\n            <input\n                type=\"text\"\n                value={message}\n                onChange={handleMessageChange}\n                placeholder=\"Type your message...\"\n                className=\"chat-input\"\n            />\n            <button onClick={handleSend} className=\"send-btn\">Send</button>\n        </div>\n    );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}